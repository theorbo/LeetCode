/* Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.*/

class Solution {
    List<List<Integer>> result = new ArrayList<>();
    LinkedList path = new LinkedList<>();
    public List<List<Integer>> combinationSum3(int k, int n) {
    int[] nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    doWork(nums, 0, n, 0, k);
    return result;
  }

  private void doWork(int[] nums, int currSum, int targetSum, int startIndex, int k) {

    if (currSum > targetSum) return;

    if (currSum == targetSum) {
      if (path.size() == k) {
        result.add(new ArrayList<>(path));
      }
    }

    for (int i = startIndex; i < nums.length && currSum + nums[i] <= targetSum; i++) {
      currSum += nums[i];
      path.add(nums[i]);
      doWork(nums, currSum, targetSum, i + 1, k);
      currSum -= nums[i];
      path.removeLast();
    }
  }
}
