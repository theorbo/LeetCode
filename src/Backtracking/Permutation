/* Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order. */

class Solution {
    // LinkedList path = new LinkedList();
    List<List<Integer>> result = new ArrayList<>();
    
     public List<List<Integer>> permute(int[] nums) {

    permute(nums, 0, nums.length - 1);
    return result;
  }

  private void permute(int[] nums, int low, int high) {

    if (low == high) {
      List<Integer> list = new ArrayList<>();
      for (int num : nums) {
        list.add(num);
      }
      result.add(list);
    } else {
      for (int i = low; i <= high; i++) {
        nums = swap(nums, low, i);
        permute(nums, low + 1, high);
        nums = swap(nums, low, i);
      }
    }
  }

  private int[] swap(int[] nums, int low, int high) {
    int temp = nums[low];
    nums[low] = nums[high];
    nums[high] = temp;
    return nums;
  }
}
