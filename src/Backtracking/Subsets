/* Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]*/

class Solution {
    List<List<Integer>> result = new ArrayList<>();
    LinkedList path = new LinkedList();
    public List<List<Integer>> subsets(int[] nums) {
    result.add(Collections.EMPTY_LIST);
    doWork(nums, 0);
    return result;
  }

  private void doWork(int[] nums, int startIndex) {

    if (startIndex >= nums.length) return;

    path.add(nums[startIndex]);
    result.add(new ArrayList<>(path));
    doWork(nums, startIndex + 1);
    startIndex++;
    path.removeLast();
    doWork(nums, startIndex);
  }
}
